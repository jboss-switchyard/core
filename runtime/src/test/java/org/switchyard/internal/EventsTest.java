/* 
 * JBoss, Home of Professional Open Source 
 * Copyright 2011 Red Hat Inc. and/or its affiliates and other contributors
 * as indicated by the @author tags. All rights reserved. 
 * See the copyright.txt in the distribution for a 
 * full listing of individual contributors.
 *
 * This copyrighted material is made available to anyone wishing to use, 
 * modify, copy, or redistribute it subject to the terms and conditions 
 * of the GNU Lesser General Public License, v. 2.1. 
 * This program is distributed in the hope that it will be useful, but WITHOUT A 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details. 
 * You should have received a copy of the GNU Lesser General Public License, 
 * v.2.1 along with this distribution; if not, write to the Free Software 
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
 * MA  02110-1301, USA.
 */

package org.switchyard.internal;

import java.util.Collections;
import java.util.EventObject;
import java.util.HashSet;
import java.util.Set;

import javax.xml.namespace.QName;

import junit.framework.Assert;

import org.junit.Before;
import org.junit.Test;
import org.switchyard.BaseHandler;
import org.switchyard.MockDomain;
import org.switchyard.Service;
import org.switchyard.ServiceDomain;
import org.switchyard.ServiceReference;
import org.switchyard.event.EventObserver;
import org.switchyard.event.ReferenceRegistrationEvent;
import org.switchyard.event.ReferenceUnregistrationEvent;
import org.switchyard.event.ServiceRegistrationEvent;
import org.switchyard.event.ServiceUnregistrationEvent;
import org.switchyard.event.TransformerAddedEvent;
import org.switchyard.event.TransformerRemovedEvent;
import org.switchyard.event.ValidatorAddedEvent;
import org.switchyard.event.ValidatorRemovedEvent;
import org.switchyard.metadata.InOutService;
import org.switchyard.transform.BaseTransformer;
import org.switchyard.transform.Transformer;
import org.switchyard.validate.BaseValidator;
import org.switchyard.validate.Validator;

/**
 *  Tests for events generated by the core runtime.
 */
public class EventsTest {

    private ServiceDomain _domain;
    private DummyObserver _observer;
    
    @Before
    public void setUp() throws Exception {
        _domain = new MockDomain();
        _observer = new DummyObserver();
    }
    
    @Test
    public void testTransformerEvents() {
        _domain.addEventObserver(_observer, TransformerAddedEvent.class)
            .addEventObserver(_observer, TransformerRemovedEvent.class);
        Transformer<String, String> t = new BaseTransformer<String, String>() {
            public String transform(String from) {
                return null;
            }
        };
        
        _domain.getTransformerRegistry().addTransformer(t);
        _domain.getTransformerRegistry().removeTransformer(t);
        
        _observer.waitFor(TransformerAddedEvent.class, TransformerRemovedEvent.class);
        
        Assert.assertTrue(_observer.addTransformerCalled);
        Assert.assertTrue(_observer.removeTransformerCalled);

    }

    @Test
    public void testValidatorEvents() {
        _domain.addEventObserver(_observer, ValidatorAddedEvent.class)
            .addEventObserver(_observer, ValidatorRemovedEvent.class);
        Validator<String> t = new BaseValidator<String>() {
            public boolean validate(String name) {
                return false;
            }
        };
        _domain.getValidatorRegistry().addValidator(t);
        _domain.getValidatorRegistry().removeValidator(t);
        
        
        _observer.waitFor(ValidatorAddedEvent.class, ValidatorRemovedEvent.class);

        Assert.assertTrue(_observer.addValidatorCalled);
        Assert.assertTrue(_observer.removeValidatorCalled);
    }
    
    @Test
    public void testReferenceEvents() {
        _domain.addEventObserver(_observer, ReferenceRegistrationEvent.class)
            .addEventObserver(_observer, ReferenceUnregistrationEvent.class);
        
        ServiceReference ref = _domain.registerServiceReference(new QName("test"), new InOutService());
        ref.unregister();
        
        _observer.waitFor(ReferenceRegistrationEvent.class, ReferenceUnregistrationEvent.class);
        Assert.assertTrue(_observer.referenceRegistrationCalled);
        Assert.assertTrue(_observer.referenceUnregistrationCalled);
    }

    @Test
    public void testServiceEvents() {
        _domain.addEventObserver(_observer, ServiceRegistrationEvent.class)
            .addEventObserver(_observer, ServiceUnregistrationEvent.class);
        
        Service service = _domain.registerService(new QName("test"), new InOutService(), new BaseHandler());
        service.unregister();
        
        _observer.waitFor(ServiceRegistrationEvent.class, ServiceUnregistrationEvent.class);
        
        Assert.assertTrue(_observer.serviceRegistrationCalled);
        Assert.assertTrue(_observer.serviceUnregistrationCalled);
    }
}


class DummyObserver implements EventObserver {
    
    public boolean removeTransformerCalled;
    public boolean addTransformerCalled;
    public boolean removeValidatorCalled;
    public boolean addValidatorCalled;
    public boolean referenceRegistrationCalled;
    public boolean referenceUnregistrationCalled;
    public boolean serviceRegistrationCalled;
    public boolean serviceUnregistrationCalled;

    Set<Class<? extends EventObject>> processedEvents = new HashSet<Class<? extends EventObject>>();
    
    public void notify(EventObject event) {
        if (event instanceof TransformerAddedEvent) {
            addTransformerCalled = true;
        } else if (event instanceof TransformerRemovedEvent) {
            removeTransformerCalled = true;
        } else if (event instanceof ValidatorAddedEvent) {
            addValidatorCalled = true;
        } else if (event instanceof ValidatorRemovedEvent) {
            removeValidatorCalled = true;
        } else if (event instanceof ReferenceRegistrationEvent) {
            referenceRegistrationCalled = true;
        } else if (event instanceof ReferenceUnregistrationEvent) {
            referenceUnregistrationCalled = true;
        } else if (event instanceof ServiceRegistrationEvent) {
            serviceRegistrationCalled = true;
        } else if (event instanceof ServiceUnregistrationEvent) {
            serviceUnregistrationCalled = true;
        }
        
        
        synchronized (this) {
        	processedEvents.add(event.getClass());
        	this.notifyAll();
		}
    }
    
    public void waitFor(Class<? extends EventObject> ...events) {
    	Set<Class<? extends EventObject>> requiredSet = new HashSet<Class<? extends EventObject>>();
    	Collections.addAll(requiredSet, events);
    	
    	while(processedEvents.containsAll(requiredSet) == false) {
	    	synchronized (this) {
				try {
					this.wait();
				} catch (InterruptedException e) {
				}
			}
    	}
    }
    
    public void clearProcessed() {
    	processedEvents.clear();
    }
}